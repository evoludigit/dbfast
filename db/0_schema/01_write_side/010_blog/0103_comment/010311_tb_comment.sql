CREATE TABLE blog.tb_comment (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pk_comment UUID DEFAULT gen_random_uuid() NOT NULL,
    pk_post UUID NOT NULL,
    pk_author_user UUID,
    pk_parent_comment UUID,
    author_name VARCHAR(100),
    author_email VARCHAR(255),
    content TEXT NOT NULL,
    is_approved BOOLEAN DEFAULT false,
    is_spam BOOLEAN DEFAULT false,
    user_ip INET,

    -- Audit fields
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by UUID,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_by UUID,
    deleted_at TIMESTAMPTZ,
    deleted_by UUID,

    CONSTRAINT tb_comment_pk_comment_key UNIQUE (pk_comment),
    CONSTRAINT fk_comment_post FOREIGN KEY (pk_post)
        REFERENCES blog.tb_post(pk_post) ON DELETE CASCADE,
    CONSTRAINT fk_comment_author_user FOREIGN KEY (pk_author_user)
        REFERENCES blog.tb_user(pk_user) ON DELETE SET NULL,
    CONSTRAINT fk_comment_parent FOREIGN KEY (pk_parent_comment)
        REFERENCES blog.tb_comment(pk_comment) ON DELETE CASCADE,

    -- Either authenticated user OR guest name/email required
    CONSTRAINT chk_comment_author CHECK (
        (pk_author_user IS NOT NULL) OR
        (author_name IS NOT NULL AND author_email IS NOT NULL)
    )
);

-- Indexes for performance
CREATE INDEX idx_tb_comment_post ON blog.tb_comment(pk_post);
CREATE INDEX idx_tb_comment_author_user ON blog.tb_comment(pk_author_user);
CREATE INDEX idx_tb_comment_parent ON blog.tb_comment(pk_parent_comment);
CREATE INDEX idx_tb_comment_approved ON blog.tb_comment(is_approved, created_at);
CREATE INDEX idx_tb_comment_spam ON blog.tb_comment(is_spam);

-- Documentation
COMMENT ON TABLE blog.tb_comment IS '[Table: 010311 | Write-Side.Blog.Comment] Stores comments on blog posts, supports both authenticated and guest comments.';
COMMENT ON COLUMN blog.tb_comment.id IS 'Internal numeric primary key. Not used in joins.';
COMMENT ON COLUMN blog.tb_comment.pk_comment IS 'Public UUID used for joins and external references.';
COMMENT ON COLUMN blog.tb_comment.pk_post IS 'UUID reference to the blog post.';
COMMENT ON COLUMN blog.tb_comment.pk_author_user IS 'UUID reference to authenticated user (optional for guest comments).';
COMMENT ON COLUMN blog.tb_comment.pk_parent_comment IS 'UUID reference to parent comment for nested replies.';
COMMENT ON COLUMN blog.tb_comment.author_name IS 'Name for guest commenters (null for authenticated users).';
COMMENT ON COLUMN blog.tb_comment.author_email IS 'Email for guest commenters (null for authenticated users).';
COMMENT ON COLUMN blog.tb_comment.content IS 'Comment content text.';
COMMENT ON COLUMN blog.tb_comment.is_approved IS 'Whether the comment has been approved for display.';
COMMENT ON COLUMN blog.tb_comment.is_spam IS 'Whether the comment has been flagged as spam.';
COMMENT ON COLUMN blog.tb_comment.user_ip IS 'IP address of the commenter for spam detection.';
