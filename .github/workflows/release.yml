# Professional release workflow with multi-platform builds
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate release prerequisites
  pre-release:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Validate version in Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$CARGO_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "ERROR: Version mismatch - Tag: ${{ steps.version.outputs.version }}, Cargo.toml: $CARGO_VERSION"
            exit 1
          fi

      - name: Check changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "WARNING: No CHANGELOG.md found"
            exit 0
          fi
          if ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
            echo "WARNING: Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
          fi

  # Build binaries for multiple platforms
  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: pre-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dbfast
            asset_name: dbfast-linux-amd64
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dbfast
            asset_name: dbfast-linux-amd64-musl
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dbfast
            asset_name: dbfast-macos-amd64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dbfast
            asset_name: dbfast-macos-arm64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dbfast.exe
            asset_name: dbfast-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          retention-days: 7

  # Run comprehensive tests before release
  test:
    name: Release Tests
    runs-on: ubuntu-latest
    needs: pre-release
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      POSTGRES_PASSWORD: postgres
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install test tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            sleep 2
          done

      - name: Run tests
        run: cargo nextest run --all-features --release

      - name: Run integration tests
        run: cargo test --release --test integration

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [pre-release, build, test]
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} ./release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.pre-release.outputs.version }}"
          echo "## Release Notes for v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Extract from CHANGELOG if it exists
          if [ -f CHANGELOG.md ]; then
            # Try to extract section for this version
            sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> release_notes.md
          else
            echo "### Changes" >> release_notes.md
            echo "- See commit history for detailed changes" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### Assets" >> release_notes.md
          echo "- **Linux (glibc)**: \`dbfast-linux-amd64.tar.gz\`" >> release_notes.md
          echo "- **Linux (musl)**: \`dbfast-linux-amd64-musl.tar.gz\`" >> release_notes.md
          echo "- **macOS (Intel)**: \`dbfast-macos-amd64.tar.gz\`" >> release_notes.md
          echo "- **macOS (ARM64)**: \`dbfast-macos-arm64.tar.gz\`" >> release_notes.md
          echo "- **Windows**: \`dbfast-windows-amd64.exe.zip\`" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release.outputs.tag }}
          name: "Release ${{ needs.pre-release.outputs.tag }}"
          body_path: release_notes.md
          files: |
            ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true

  # Publish to crates.io (only for tags)
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: |
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true  # Don't fail if already published